import sys
import Crypto.Util.number
import base64
from Crypto.Cipher import AES

if sys.argv[1] == "-h" or sys.argv[1] == "--help":
        print "This program decrypts ciphertext using a key, initilization vector and file of base64 ciphertext"
        print "deryptAES128CBC [key(text)] [IV(hex)] [file]"
        exit()

def XOR(msg, c):
	a = list(msg)
	b = list(c)
	c = range(len(a))
	for i in range(len(a)):
		c[i] = str(hex(int(a[i],16)^int(b[i],16))).replace("0x","")
	return ''.join(c)

def hex2text(input):
	output = ""
	hex = str(input).replace("0x","")
	for i in range(len(hex)/2):
		output += chr(int(hex[2 * i:2 + (i * 2)],16))
	return output

def text2hex(input):
	output = ""
	for c in input:
		h = str(hex(ord(c))).replace("0x","")
		if len(h) < 2:
			h = "0" + h
		output += h
	return output

f = open(sys.argv[3], 'r')
fileText = f.read().replace("\n","")
msg = text2hex(base64.b64decode(fileText))
textKey = sys.argv[1]
key = text2hex(textKey)
IV = sys.argv[2]
block = len(key)
if not(block == len(IV)):
	print "IV must be the same length as key. Remember 1 letter = 2 hex chars."
	exit()
lastBlock = IV
A = AES.new(textKey, 1)#, iv)
output = ""
for i in range(len(msg)/block):
	output += hex2text(XOR(text2hex(A.decrypt(hex2text(msg[block*i:block*(i+1)]))),lastBlock))
	lastBlock = msg[block*i:block*(i+1)]
print output
