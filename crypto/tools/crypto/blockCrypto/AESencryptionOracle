import sys
import numpy
import random
import time
import base64
from Crypto.Cipher import AES

if sys.argv[1] == "-h" or sys.argv[1] == "--help":
        print "This program encrypts text using CBC or ECB with a random key and initilizaton vector"
        print "AESencryptionOracle [text]"
        exit()

def randKey():
	#num = str(hex(random.randint(0,int(,16)))).replace("0x","").replace('L','')
	num = ""
	for i in range(16):
		a = random.randint(48,122)
		num += chr(a).replace("0x","").replace('L','')
	while len(num) < 16:
		num += " " 
	return num

def hex2text(input):
	output = ""
	hex = str(input).replace("0x","")
	for i in range(len(hex)/2):
		output += chr(int(hex[2 * i:2 + (i * 2)],16))
	return output

def text2hex(input):
	output = ""
	for c in input:
		h = str(hex(ord(c))).replace("0x","")
		if len(h) < 2:
			h = "0" + h
		output += h
	return output

def XOR(msg, c):
	a = list(msg)
	b = list(c)
	c = range(len(a))
	for i in range(len(a)):
		c[i] = str(hex(int(a[i],16)^int(b[i],16))).replace("0x","")
	return ''.join(c)

def encryptCBC(msg,key,IV):
	block = len(key*2)
	lastEncryptedBlock = text2hex(IV)
	A = AES.new(key, 1)
	output = ""
	for i in range(len(msg)/block):
		lastEncryptedBlock = text2hex(A.encrypt(hex2text(XOR(msg[block*i:block*(i+1)], lastEncryptedBlock))))
		output += hex2text(lastEncryptedBlock)
	return base64.b64encode(output)

def encryptECB(msg, key):
	a = AES.new(key, 1)
	return base64.b64encode(a.encrypt(hex2text(msg)))
	
random.seed(time.time())
text = hex2text(str(hex(random.randint(0,int("F"*20,16)))).replace("0x","").replace('L','')) + sys.argv[1] + hex2text(str(hex(random.randint(0,int("F"*20,16)))).replace("0x","").replace('L','')) 
key = randKey()
iv = randKey()
while not(len(text) %16 == 0):
	text = text + hex2text(str(hex(random.randint(0,int("F"*2,16)))).replace("0x","").replace('L',''))	
if random.randint(0,1) == 0:
	c = encryptCBC(text2hex(text),key,iv)
	print "CBC"
else:
	c = encryptECB(text2hex(text),key)
	print "ECB"
print c
